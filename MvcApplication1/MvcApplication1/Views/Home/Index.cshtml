@model List<MvcApplication1.Models.OrderSummary>
@{
    ViewBag.Title = "Bootstrap";
}
@section AddToHead{
<link rel="stylesheet" href="~/Content/bootstrap-responsive.min.css" />
<link rel="stylesheet" href="~/Content/bootstrap.min.css" />
<style>

.bar {
  fill: steelblue;
}

.axis text {
  font: 10px sans-serif;
}

.axis path,
.axis line {
  fill: none;
  stroke: #000;
  shape-rendering: crispEdges;
}

.x.axis path {
  display: none;
}

</style>
}
<h4>Order Summary</h4>
<div class="span4">
                <div class="well sidebar-nav">
                    <ul class="nav nav-list">
                        <li><span>@Html.ActionLink("By Week", "Index", new { type = 0 }, new { @class = "typeLink" })</span></li>
                        <li><span>@Html.ActionLink("By Month", "Index", new { type = 1 }, new { @class = "typeLink" })</span></li>
                        <li><span>@Html.ActionLink("By Year", "Index", new { type = 2 }, new { @class = "typeLink" })</span></li>
                    </ul>
                </div>
                <!--/.well -->
            </div><br />
<div class="span4"><p><span class="avgOrdered"></span><label>Average Order Amount</label>&nbsp;<span class="totOrdered"></span><label>Total Order Amount</label>&nbsp;<span class="avgShipped"></span><label>Average Shipped Amount</label>&nbsp;<span class="totShipped"></span><label>Total Shipped Amount</label></p></div>
<div style="width:80%">
<div>
<canvas id="canvas" height="600" width="800"></canvas>
</div>
</div>
<div class="table-responsive">
<table class="table">
    <thead>
        <tr>
            <th>Id</th>
            <th>Ordered</th>
            <th>Period</th>
            <th>Label</th>
            <th>Shipped</th>
            <th>Remainder</th>
            <th>Total Ordered Amount</th>
            <th>Total Shipped Amount</th>
        </tr>
    </thead>
    <tbody data-bind="foreach: OrderSummaries">
            <tr>
                <td data-bind="text: Id"></td>
                <td data-bind="text: Ordered"></td>
                <td data-bind="text: PeriodDate"></td>
                <td data-bind="text: PeriodLabel"></td>
                <td data-bind="text: Shipped"></td>
                <td data-bind="text: Remainder"></td>
                <td data-bind="text: '$' + TotalOrderedAmount.toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,')"></td>
                <td data-bind="text: '$'+TotalShippedAmount.toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,')"></td>
            </tr>
    </tbody>
</table>
    </div>
<script>
    var randomScalingFactor = function () { return Math.round(Math.random() * 100) };
    function initLineGraph(orderSummaries) {
        var xData = orderSummaries.map(function(d) {
            return d.PeriodDate;
        });
        var yData = orderSummaries.map(function (d) {
            return d.TotalOrderedAmount;
        });
        var yData2 = orderSummaries.map(function (d) {
            return d.TotalShippedAmount;
        });
        var lineChartData = {
            labels: xData,//["January", "February", "March", "April", "May", "June", "July"],
            datasets: [
            {
                label: "My First dataset",
                fillColor: "rgba(220,220,220,0.2)",
                strokeColor: "rgba(220,220,220,1)",
                pointColor: "rgba(220,220,220,1)",
                pointStrokeColor: "#fff",
                pointHighlightFill: "#fff",
                pointHighlightStroke: "rgba(220,220,220,1)",
                data: yData//[randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor()]
            },
            {
                label: "My Second dataset",
                fillColor: "rgba(151,187,205,0.2)",
                strokeColor: "rgba(151,187,205,1)",
                pointColor: "rgba(151,187,205,1)",
                pointStrokeColor: "#fff",
                pointHighlightFill: "#fff",
                pointHighlightStroke: "rgba(151,187,205,1)",
                data: yData2//[randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor(), randomScalingFactor()]
            }
            ]
        }
        //window.onload = function () {
            var ctx = document.getElementById("canvas").getContext("2d");
            window.myLine = new Chart(ctx).Line(lineChartData, {
                responsive: true
            });
        //}
    }
</script>
@section AddToBottom {
    <script src="//cdnjs.cloudflare.com/ajax/libs/Chart.js/0.2.0/Chart.min.js"></script>
    <script type="text/javascript">
        $(document).ready(function () {
            $('.typeLink').click(function (e) {
                e.preventDefault();
                e.stopPropagation();
                var href = $(this).attr('href');
                if (href.indexOf('/?type=0') >= 0) {
                    indexVM.loadOrderSummaries(0);
                }
                else if (href.indexOf('/?type=1') >= 0) {
                    indexVM.loadOrderSummaries(1);
                }
                else if (href.indexOf('/?type=2') >= 0) {
                    indexVM.loadOrderSummaries(2);
                }
            });
        });
    </script>
}
@section Scripts {
   @Scripts.Render("~/Scripts/ViewModel/IndexVM.js")
}
